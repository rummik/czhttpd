#!/usr/bin/zsh
# zsh web server

# Options
# Clear env
for z in ${$(export)%=*}; do
    case $z in
        (PWD|_|HOME)
            continue;;
        (*)
            unset $z;;
    esac
done

export PATH=/bin:/usr/bin

# Load Modules
zmodload zsh/net/tcp
zmodload zsh/stat
zmodload zsh/datetime
zmodload zsh/system
zmodload zsh/zselect

# Set shell options
setopt posix_jobs

# Declare variable types
integer logfd
integer fifofd

typeset -a CGI_EXTS

# Internal function variables that need global scope
typeset -A header
typeset -a dotdir dotfiles dir files
typeset -a cgi_head cgi_body
typeset cgi_status_code

# Defaults
DEF_CONF=~/.config/czhttpd/czhttpd.conf     # Config file
DEF_PORT=8080                               # Port
DEF_MAX_CONNS=12                            # Max Connections
DEF_HTTP_TIMEOUT=5                          # HTTP Timeout
DEF_INDEX=index.html                        # Index File
DEF_LOG=/dev/null                           # Log file

FIFO=/tmp/czhttpd.fifo

# CGI Variables
DEF_CGI_TIMEOUT=300

readonly SERVER_NAME="${$(hostname -i)% }"
readonly SERVER_ADDR="$SERVER_NAME"
readonly SERVER_SOFTWARE="czhttpd/1.2b"
readonly SERVER_PROTOCOL="HTTP/1.1"
readonly GATEWAY_INTERFACE="CGI/1.1"

# Functions
function error() {
    print "Error: $*" >&2 >&$logfd

    exec {logfd}>&-
    rm $FIFO 2>/dev/null
    ztcp -c; exit 113
}

function logger() {
    print "[$(strftime "%a %d %b, %H:%M:%S" $EPOCHSECONDS)] $*" >&$logfd
}

function logger_child() {
    print "[$(strftime "%a %d %b, %H:%M:%S" $EPOCHSECONDS)] [pid: $sysparams[pid]] (client $client_ip): $header[method] $header[url] $header[version] $*" >&$logfd
}

function timeout() {
    local pid1 pid2

    function TRAPCHLD() {
        kill $pid1 $pid2 2>/dev/null
    }

    $* &; pid1=$!
    sleep $DEF_CGI_TIMEOUT &; pid2=$!

    wait $pid1
    kill $pid2 2>/dev/null
}

function help() {
<<EOF
Usage: czhttpd [OPTIONS] <file or dir>

czhttpd - cloud's zsh http server

Configuration Options
    -c :    Config file location (default: ~/.config/czhttpd/czhttpd.conf)

Connection Options
    -m :    Max number of connections to accept (default: 12)
    -p :    Port to bind to (default: 8080)
    -t :    Connection timeout in seconds (default: 5)

File Options
    -a :    Display hidden files in directories
    -i :    Specify index file (default: index.html)
    -x :    Comma delimited list of file extensions to treat as
            CGI scripts

Output Options
    -l :    Enable logging to existing file
    -v :    Print log messages to stdout
    -h :    Print this help message

If no file or directory is given, czhttpd defaults to serving
the current directory.
EOF

exit
}

function parse_conf() {
    if [[ -f $1 ]]; then
        . $1 || { print "Cannot source config file $1"; exit 113 }
    fi

    (( $DISPLAY_HIDDEN_FILES )) && setopt GLOB_DOTS
    [[ -n $DEF_CGI_EXTS ]] && { for k in ${(s.,.)DEF_CGI_EXTS}; CGI_EXTS+="${k##*.}" }

    if [[ $DEF_LOG == "/dev/null" ]]; then
        exec {logfd}>$DEF_LOG
    elif [[ ! -f $DEF_LOG ]]; then
        error "Log file $DEF_LOG does not exist."
    else
        exec {logfd}>>$DEF_LOG
    fi
}

function parse_args() {
    zparseopts -K -D -A OPTS c: p: m: i: t: l: x: h v a || exit 113

    [[ -n $OPTS[-c] && ! -f $OPTS[-c] ]] && { print "Config file $OPTS[-c] does not exist"; exit 113 }
    parse_conf ${OPTS[-c]:-$DEF_CONF}

    [[ -n ${(kM)OPTS:#-h} ]] && help
    [[ -n ${(k)OPTS[-l]} && -n ${(k)OPTS[-v]} ]] && error "Can not output to both stdout and logfile"

    for i in ${(k)OPTS}; do
        case $i in
            (-a)
                setopt GLOB_DOTS;;
            (-m|-t)
                [[ $OPTS[$i] != <-> ]] && error "$OPTS[$i] is not a valid integer";;
            (-p)
                [[ $OPTS[$i] != <-> || $OPTS[$i] < 1024 ]] && error "$OPTS[$i] is not a valid port number.";;
            (-v)
                exec {logfd}>&1 2>/dev/null;;
            (-l)
                [[ ! -f $OPTS[$i] ]] && error "File $OPTS[$i] does not exist."
                exec {logfd}>>$OPTS[$i];;
            (-x)
                unset CGI_EXTS && typeset -ga CGI_EXTS
                for k in ${(s.,.)OPTS[$i]}; CGI_EXTS+="${k##*.}";;
        esac
    done

    logger "> Initializing czhttpd"

    MAX_CONNECTIONS=${OPTS[-m]:-$DEF_MAX_CONNS}
    PORT=${OPTS[-p]:-$DEF_PORT}
    HTTP_TIMEOUT=${OPTS[-t]:-$DEF_HTTP_TIMEOUT}
    INDEX_FILE=${OPTS[-i]:-$DEF_INDEX}

    if [[ -n $1 ]]; then
        [[ -e $1 ]] || error "$1 is not a valid directory or file."
        DOCROOT="$1"
    else
        DOCROOT="$PWD"
    fi
}

function http_listen() {
    ztcp -l $PORT 2>/dev/null || error "Could not bind to port $PORT"
    print "Listening on $PORT"
    listenfd=$REPLY
}

function parse_request() {
    read -t $HTTP_TIMEOUT -r -u $fd line || return 1
    for method url version in ${(s. .)line%$'\r'}; do
        header[method]="$method"
        header[url]="${url%\?*}"
        header[querystr]="${(M)url%\?*}"
        header[version]="$version"
    done

    while read -r -u $fd line; do
        [[ -n $line && $line != $'\r' ]] || break
        for key value in ${(s/: /)line%$'\r'}; do
            header[${(L)key}]="$value"
        done
    done
}

function check_request() {
    [[ $header[version] != "HTTP/1.1" ]] && { error_header 505; return 1 }

    case $header[method] in
        ("HEAD"|"GET"|"POST")
            return 0;;
        (*)
            error_header 501
            return 1;;
    esac
}

function return_header() {
    print -n "HTTP/1.1 $1\r\n"
    print -n "Connection: keep-alive\r\n"
    print -n "Date: $(export TZ=UTC && strftime "%a, %d %b %Y %H:%M:%S" $EPOCHSECONDS) GMT\r\n"
    print -n "Server: czhttpd\r\n"
    for i in "$@[2,-1]"; do
        print -n "$i\r\n"
    done
    print -n "\r\n"
}

function error_header() {
    case "$1" in
        (403)
            message="403 Forbidden";;
        (404)
            message="404 Not Found";;
        (500)
            message="500 Internal Server Error";;
        (501)
            message="501 Not Implemented";;
        (505)
            message="505 HTTP Version Not Supported";;
    esac

    logger_child "$message"
    return_header "$message" "Content-type: text/plain; charset=UTF-8" "Content-Length: ${#message}"
    print "$message"
}

function html_template() {
<<EOF
<!DOCTYPE html>
<html>
<head>
<style type="text/css">
a {text-decoration: none;}
table { border-top: 1px solid black; border-bottom: 1px solid black; font: 90% monospace; border-collapse: collapse; margin: 4px; }
thead th { padding-top: 4px; padding-bottom: 6px; text-align: left; }
thead th:nth-child(2) { text-align: right; padding-right: 12px; }
tbody td:nth-child(2) { text-align: right; padding-right: 12px; }
tbody td:first-child { padding-right: 30px; }
tbody tr:hover { background: rgba(0,0,0,0.3); color: #fff; cursor: pointer; }
</style>
<title>czhttpd</title>
</head>
<body>
<h1>Index of $1</h1>
<table padding=10>
    <thead>
    <tr>
        <th>Name</th>
        <tsize>
        <th>Size</th>
        </tsize>
        <th>Type</th>
    </tr>
    </thead>
    <tbody>
    $@[2,-1]
    </tbody>
</table>
</body>
</html>
EOF
}

function html_fragment() {
<<EOF
<tr><td><a href="${1#*/}">${1#*/}</a></td>
<td>$(calc_size $1)</td>
<td>$(mime_type $1)</td></tr>
EOF
}

function urlencode() {
    for i in ${(s::)1}; do
        case "$i" in
            ([-._~A-Za-z0-9])
                printf '%s' "$i";;
            (*)
                printf '%%%02x' "'$i";;
        esac
    done

    printf '\n'
}

function urldecode() {
    printf '%b\n' "${1:gs/%/\\x}"
}

function mime_type() {
    [[ -d "$1" ]] && { print "Directory"; return }

    case $1 in
        (*.html)
            print "text/html";;
        (*.css)
            print "text/css";;
        (*)
            mtype=$(file --mime-type -bL $1)
            [[ ${mtype:h} == text ]] && { print "text/plain"; continue }
            print "${mtype#application/x-executable}";;
    esac
}

function calc_size() {
    [[ -d "$1" ]] && { print "\-"; return }

    KB=1024.0
    MB=1048576.0
    GB=1073741824.0
    
    size=$(stat -L +size $1)

    (( $size < $KB )) && { printf '%.1f%s\n' "${size}" "B" && return }
    (( $size < $MB )) && { printf '%.1f%s\n' "$((size/$KB))" "K" && return }
    (( $size < $GB )) && { printf '%.1f%s\n' "$((size/$MB))" "M" && return }
    (( $size > $GB )) && { printf '%.1f%s\n' "$((size/$GB))" "G" && return }
}

function list_dir() {
    unset dir dotdir files dotfiles
    typeset -ga dir dotdir files dotfiles

    cd "$1"

    [[ "${1%/}" != "${DOCROOT%/}" ]] && dotdir+="$(html_fragment '/../')"

    for i in ./*(Nr); do
        if [[ $i == ./.* ]]; then
            [[ -d "$i" ]] && dotdir+="$(html_fragment $i/)"
            [[ -f "$i" ]] && dotfiles+="$(html_fragment $i)"
            continue
        elif [[ -d "$i" ]]; then
            dir+="$(html_fragment $i/)"
        else
            files+="$(html_fragment $i)"
        fi
    done

    cd -
}

function send_list() {
    return_header "200 Ok" "Transfer-Encoding: chunked" "Content-type: text/html; charset=UTF-8"

    list_dir $1
    send_chunk "$(html_template $1 $dotdir $dotfiles $dir $files)"
}

function send_file() {
    local -a array

    stat -H array $1
    mimetype=$(mime_type $1)

    return_header "200 Ok" "Content-type: $mimetype; charset=UTF-8" "Content-Length: $array[size]"
    if [[ $header[method] != "HEAD" ]]; then
        <$1
    fi
}

function send_chunk() {
    if [[ $header[method] != "HEAD" ]]; then
        for i in {1..$#}; do
            printf '%x\r\n' "$(expr "x$@[$i]" : '.*' - 1)"
            printf '%s\r\n' "$@[$i]"
        done
        printf '%x\r\n' "0"
        printf '\r\n'
    fi
}

function check_if_cgi() {
    for i in $CGI_EXTS; [[ ${1##*.} == $i ]] && break

    [[ $? != 0 || ! -x $1 ]] && return 1

    return 0
}

function parse_cgi() {
    unset cgi_head cgi_body cgi_status_code
    typeset -ga cgi_head cgi_body
    typeset -g cgi_status_code

    while read -r -p line; do
        [[ -z $line || $line == $'\r' ]] && break
        [[ $line =~ "Status:*" ]] && cgi_status_code=${line#Status: }
        cgi_head+=${line%$'\r'}
    done

    # We use sysread to limit the number of bytes read so as not to exceed MAX_ARG for expr
    while sysread chunk <&p; do
        cgi_body+=$chunk
    done
}

function send_cgi() {
    if [[ -n $cgi_body ]]; then
        return_header ${cgi_status_code:-"200 Ok"} "Transfer-Encoding: chunked" $cgi_head[@]
        send_chunk $cgi_body[@]
    else
        return_header ${cgi_status_code:-"200 Ok"} "Content-Length: 0" $cgi_head[@]
    fi
}

function exec_cgi() {
    local cmd pid

    local -x CONTENT_LENGTH="${header[content-length]:-NULL}" CONTENT_TYPE="$header[content-type]" GATEWAY_INTERFACE="$GATEWAY_INTERFACE" QUERY_STRING="${header[querystr]#\?}" REMOTE_ADDR="$client_ip" REMOTE_HOST="NULL" REQUEST_METHOD="$header[method]" SCRIPT_NAME="${1#$DOCROOT}" SERVER_NAME="$SERVER_NAME" SERVER_ADDR="$SERVER_ADDR" SERVER_PORT="$PORT" SERVER_PROTOCOL="$SERVER_PROTOCOL" SERVER_SOFTWARE="$SERVER_SOFTWARE"

    local -x DOCUMENT_ROOT="$DOCROOT" REQUEST_URI="$header[url]$header[querystr]" SCRIPT_FILENAME="$1" REDIRECT_STATUS=1

    for i in ${(k)header}; do
        case $i in
            ("connection"|"content-length"|"content-type"|"querystr")
                continue;;
            ("method"|"version"|"url")
                continue;;
            (*)
                local -x HTTP_${(U)i:gs/\-/\_}="$header[$i]";;
        esac
    done

    [[ ${1##*.} == "php" ]] && cmd="php-cgi"

    logger_child "Executing cgi script $1"
    coproc { timeout $cmd "$1" <&$fd }
    pid=$!

    parse_cgi
    if ! wait $pid; then
        logger_child "ERROR executing CGI script $1"
        return 1
    elif [[ -z ${(M)${cgi_head:l}:#content-type*} ]]; then
        logger_child "ERROR CGI script $1 failed to return MIME-type"
        return 1
    else
        send_cgi
    fi
}

function srv() {
    check_request || return 1

    pathname="${DOCROOT}${$(urldecode $header[url])%/}"
    { if [[ -f $pathname ]]; then
        [[ $options[globdots] == off && ${pathname:t} == .* ]] && { error_header 403; return }

        if check_if_cgi $pathname; then
            exec_cgi $pathname
        else
            send_file $pathname
        fi

    elif [[ -d $pathname ]]; then
        if [[ -f $pathname/$INDEX_FILE ]]; then
            if check_if_cgi $INDEX_FILE; then
                exec_cgi $pathname/$INDEX_FILE
            else
                send_file $pathname/$INDEX_FILE
            fi
        else
            send_list $pathname
        fi
    else
        error_header 404
        return
    fi } || { error_header 500; return }

    logger_child "200"
}

function cleanup() {
    for i in ${(SM)jobstates##<->}; do
        kill $i 2>/dev/null
    done

    logger "> Exiting main"
    exec {logfd}>&-; exec {fifofd}>&-
    rm $FIFO; ztcp -c
}

function TRAPCHLD() {
    while read -t 0 -u $fifofd line; do
        logger "exiting fork $line"
    done
}

# Main
trap "cleanup; exit" INT KILL TERM

parse_args $*
logger "MAX_CONNECTIONS: $MAX_CONNECTIONS"
logger "PORT: $PORT"
logger "TIMEOUT: $HTTP_TIMEOUT"
logger "INDEX_FILE: $INDEX_FILE"
logger "CGI_EXTENSIONS: ${CGI_EXTS:-"N/A"}"
logger "HIDDEN_FILES: $options[globdots]"

http_listen

mkfifo $FIFO 2>/dev/null || error "Can not create $FIFO"
exec {fifofd}<>$FIFO

while :; do
    while (( ${#jobstates} >= $MAX_CONNECTIONS )); do
        logger "max connections hit, temporarily unable to fork"
        zselect -r $fifofd && break
    done

    ztcp -a $listenfd

    ( trap "ztcp -c; exit" KILL TERM; trap '' PIPE

    fd=$REPLY

    ztcp_sess=$(ztcp -L)
    while read line; do
        [[ $line[3] == "I" ]] && { client_ip=${line[(ws. .)3]}; break }
    done <<< $ztcp_sess

    while :; do
        unset header && typeset -A header
        parse_request

        [[ -z $header ]] && { logger_child "empty request, closing"; RC=113 && break }

        srv >&$fd 2>/dev/null || { logger_child "broken socket, closing"; RC=113 && break }

        [[ $header[Connection] == "close" ]] && { logger_child "connection type: close, closing"; break }
    done

    ztcp -c

    # Mimic exit status since zsh does not have a posix compatible 'wait'
    print "$sysparams[pid]: ${RC:-0}" ) >&$fifofd &

    ztcp -c $REPLY
done
